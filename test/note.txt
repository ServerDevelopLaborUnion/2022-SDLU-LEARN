===
타입변환 없이 비교해줌

javascript {
    변수를 선언할 때: 일단 <const -> 자유롭게 할당> 로 선언(수정할 때 <let-> 자유롭게 할당> 으로 변경)
    수열 선언 : const arr = [];
    수열에 수를 넣을때 : arr.push(입력값);
    수열 출력 {
        for(const x of arr) {
            console.log(x);
        }
    }
}
open server {
    ws 클래스 다운로드 npm install ws
    ws 클래스를 열기(const ws = require('ws');)
    서버 만들기(const server = new ws.Server({port: 8922});)
}
in server..{
    server.on("listening", () => {
        console.log("서버가 열렸습니다!");
    }); // 서버가 열렸을 때 콘솔창에 알림
        //(listening은 서버의 오픈여부 확인함수)

    server.on("connection", (socket) => {
        socket.on("message", (a) => {
            socket.send(a.toString());
        });
    }); // 서버에 클라이언트가 오면("connection")
        // 클라이언트에게 받은 값을 a에 저장함("message")
        // socket.send가 a를 클라이언트에게 보냄
        // toString은 a를 string(문자열)로 바꿔줌
}

cmd > ipconpig 
    현재 접속한 인터넷의 IP를 보여줌


   void Start()
    {
        webSocket = new WebSocket("ws://Ip:port");
        webSocket.OnOpen += (sender, e) =>  
        //소켓서버가 열렸을 때 sender가 보냄, 받는 변수이름이 e
        {
            Debug.Log("서버에 연결됨"); //유니티 콘솔창에 띄움
            webSocket.Send("ㅎㅇ"); //서버에서 클라에게 보냄
        };

        webSocket.OnMessage += (sender, e) => //클라가 서버에게 메시지를 보냈을 때
        {
            Debug.Log(e.Data); //콘솔에 해당 메시지를 띄움
        };
        webSocket.ConnectAsync(); 
    }

    public void SendChat() //SendChat 관련 함수
    {
        webSocket.Send(input.text); //입력받은 text를 서버로 보냄
    }
}




