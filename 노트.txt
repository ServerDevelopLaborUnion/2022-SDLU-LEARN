변수 선언 : let,const 이용
let은 변수값을바꿀수있는반면 const는 한번지정하면 바꿀수없음
모든 변수를 const로 지정한후 나중에 바꿔야하는 변수가있으면 let으로 바꿔줌;

3/24 배운것

webSocket을 이용해 클라이언트랑 서버랑 연결시켜서 입력한값을 다른 사람서버에 나타날수있게 해보았다.
Http통신은 Client의 요청이 있을때만, 서버가 응답해서 정보를 전송하고,곧바로 연결을끊는 방식이다.
옛날에는 모두다 이방식을 사용했는데 이방식을 사용하면 매번요청해줘야하는 번거러움이있어서 그단점을 해결하기위해
Socket을 이용해 양방향 통신이 가능하게 되었다.

Unity에서 webSocket-sharp을 쓰기위해 먼저 using을해줘야함.
webSocket.OnOpen은 서버가 열렸을때 실행되는 코드고 webSocket.OnMessage는 메세지가 실행됬을때 실행되는코드.
Debug.Log는 유니티콘솔창띄우는것

복습*

mkdir명령어로 폴더만들기 
cd를 이용해 만든폴더 들어가기
init
port : 8080 = 8080개의 문을 연다는뜻
wss.on(listening) : 서버가 열렷을때
wss.on("connection") : 다른유저가 내서버에 접속했을때
toString을 이용해 읽을수있는 문자열로 변환
client.send() : 클라이언트에 보내는거
webSocket.ConnectAsync()를 써야지 안멈추고 굴러감

3/30
foreach반복문을 이용해 모든 client에 send할수있다.

Unity;
Unity에서 summary는 적어주는것이 좋다.
summary사용법 : ///
time.deltatime은 한프레임당 실행하는 시간이라는뜻이고 이것을 speed에 곱해주면 모든컴퓨터에서 같은 속도로 움직일수있게 해준다.
Instantiate()함수를 사용하면 게임을 실행하는 도중에 게임오브젝트를 생성할 수 있다      
Quaternion을 사용하면 회전을계산할수있다.

4/7일 배운내용
   JS : const fs = require('fs');// 파일시스템 사용가능하게해주는 코드
        fs.existsSync(file)//동기식 파일 확인
        scores = JSON.parse(fs.readFileSync(file));
        //JSON.parse : 파일을 불러와 파싱, fs.existsSync(file) : 동기로 파일확인 
        split(':') // :을기준으로 나누는거
        wss.clients.forEach(client => {sendScores(client);});// forEach문으로 클라이언트한테 점수를 각각 보내주는 코드
        JSON.stringify// JSON문자열로 변환
        case "get": // type이 get인 경우(get을 입력받은 경우)
                socket.send(Object.keys(scores).map((key) => {
                    return key + "," + scores[key]; // 이 return 값을 client에게 보냄
                    //return `${key},${scores[key]}`; 위와 같은 코드
                }).join("|")); // 한 key(nick)에 대한 정보를 보내고 "|"를 입력해줌
                // 클라이언트에게 "key(nick1),scores[key(nick1)]|key(nick2),scores[key(nick2)]" 형식으로 보내기
                break; // "get" case 나가기

